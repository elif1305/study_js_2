///////////////////////////////
      API
///////////////////////////////


/**** POSTMAN *******/

API DOKUMANI : https://reqres.in/api/users?page=2

=>  get islemlerinde url ile 
post put delete body ile gondermek daha dogru

=> body daha cok veri guncellerken veya yeni veri eklerken kullaniliyor.

=> https://learning.postman.com/docs/writing-scripts/script-references/test-examples/

=> postman yayin yapma

collections-> CaptionPrices (yayinlanmak istenilen belge) yanindaki 3 noktaya tikla->view documentaion ->
publish -> acilan sayfadan ayarlari yap publish de.

/////////////////////////////
SYNCHRONOUS - ASYNCHRONOUS 
/////////////////////////////////

Synchronous : sirali calisan kodlar, cok uzun kodlarda calismasi cok zaman alir.
ASynchronous : arka planda calisan kodlar vardir ve code u bloklamayan code lara ASynchronous kodlama denir.

//! Javascript, bir single-threaded ve Asenkron Programlama dilidir.
=> single-threaded : birim zamanda bir islem parcacigi calistirabilir.

=> bir isi yurutmek icin alt procesessler olusturuluyor, ve bu processlerinde alt thread leri olusturuluyor.


=> Multithreading For example, while subscribing to a website, clicking the submit button would cause you to wait until the confirmation e-mail is sent to your mailbox if it is not sent on a separate thread.

=> CPU birden fazla iş yaparken aslında zamanı küçük dilimlere böldüğünde milisaniye seviyesinde. belli bir zaman aralığında birden fazla iş yapıyormuş gibi geliyor.

=> 
console.time('timer');  // ne kadar sure gectigini olcmek icin baslatma fonksiyonu
bekle(3000);
console.timeEnd('timer');  // ne kadar sure gectigini olcmek icin baslatilan fonks. durdurma fonksiyonu


=> setTimeout()
setTimeout(function, milliseconds);

setTimeout in icine, buradaki surenin bir onemi yok. setTimeout kullanildigi zaman macrotask queue sirasina girer ve microtask queue sirasi bitmeden macroya gecmeyecegi icin sure ne olursa olsun once microtask in bitmesi beklenir sonra macro task a gecilir.


birden fazla setTimeout oldugunda surelerine gore calisir, sureleri esitse yazilma sirasina gore calisir.


Examples of macrotasks are setTimeout, setInterval, setImmediate, etc.
Examples of microtasks are, Promises, processes.nextTick, etc

=> Asenkron (setInterval, clearInterval)


=> Callback Hell (nested ve birbirine bagli callback'ler)


// callback yontemi sikintili bir yapi oldugu icin bazi cozumler gelistirilmis.

//? COZUMLER:
//?----------------------------------------------------------------
//* 1- XMLHttpRequest (Eski yontem, Ornek: AJAX)
//? https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
//* 2- Promise,
//! 3- Fetch API (Promise'in basitlestirilmis hali),
//! 4- ASYNC-AWAIT (Fetch API'nin makyajlanmis hali)



2- Promise


Promise, asenkron bir islemin basariyla ve basarisizlikla bittigini gosteren
ve ayni zamanda basariyla bittiginde sonuc verilerini temsil eden bir nesne yapisidir.




3- Fetch API (Promise'in basitlestirilmis hali)

https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods


https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch


NOTE: 
  //! error handling          BU YAPI ONEMLI HEP KULLANILIYOR
    if (!res.ok) {
      throw new Error(`Something went wrong: ${res.status}`);
    }
    return res.json();


4- ASYNC-AWAIT (Fetch API'nin makyajlanmis hali)


//? Async-Await ECMAScript 2017 ile Javascript diline eklenmistir.
//? Aslinda Promise yapisinin syntax olarak basitlestirilmis halidir.
//? Bu baglamda sentetik seker benzetmesi yapilabilir.

//* Bir fonskiyonu asyn hale getirmek icin fonksiyon keyword'nun onune
//* async keyword'u eklenir.

//* Bir async fonksiyon icerisinde await keyword'u ile yapilan istegin cevabinin
//* beklenmesi saglanir.

//* Aslinda dizilis olarak senkron mantiga benzeyen kod yazarak Asenkron
//* kod yazmayı mumkun kilar.

//* Await, promise-temelli herhangi bir fonksiyonun onune getirilerek getirildigi
//* satirdaki kodun durudurulmasini saglar. Yapilan istek yerine getirilip sonuc
//* degerlerinin dondurulmesine ile kodun calismasi devam eder.

//? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function#examples
https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function


///////////////////////
   WHETHER APP NOTES
////////////////////////



Proje cozumununu axios ile yapacagiz.
 //! axios ile islem yapildiginda veri gonderilip alinirken ekstra islem (strinfy,parse gibi) yapilmasina gerek yoktur. axios bunu kendisi otomtik olarak json olarak islem yapar.
axios kullanimi icin CDN linkini html e eklemek gerekiyor.

<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

axios bir kutuphane , fetch js in bir yontemi.


kullanilacak URL : https://openweathermap.org/current

API linki (bizim yazdigimiz-postmande de api kontrolu bakilablir) : http://api.openweathermap.org/data/2.5/weather?q=ankara&appid=4d8fb5b93d4af21d66a2948710284366&units=metric&lang=tr









