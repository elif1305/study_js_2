====================
      JS Notes
====================

=> childElementCount

=> focus()  ; or sayfa yuklendiginde input a focus istiyorsak

=> createElement yaptiktan sonra , appendChild yapilmasi gerekir.

=> closest() ; en yakin parent i bulur, birden fazla varsa aranan en yakin olani alir.

=> classlist() ; onceki classlari silmek istemiyorsak bununla ekleme yapabliriz.

=> preventDefault() ; event in default davranisini engeller. 


=>
event.target ile istediğimiz DOM elemanlarına erişirken kullandığımız sibling, parentElement vb. seçicilerini 
kullanmanın yanında alternatif olarak geçen derste biraz bahsettiğim closest() seçicisi de kullanılabilir.

1-) event.target.closest("parent class veya id'si")
Bu şekilde nested olarak parent'lar yazmak yerine doğrudan ilgili parent'a gidebilrisiniz.

2-) size parent değil de kardeş vb elementler lazım ise
bulunduğunuz element ile aranılan kardeş element arasındaki ortak bir parent closest() ile seçilir 
ve querSelector() ile istenilen kardeş veya child'a erişilir.
event.target.closest("ortak parent adi" ).querySelector("aranılan elementin adi")

=> 
birden fazla sayfada kullanmak istedigimiz degiskenleri storage ta tutabliriz;
localStorage.setItem(neyi tutmak istiyorsan)  ; saklama suresi yok silene kadar kalir
sessionStorage.setItem(neyi tutmak istiyorsan)   ; browser kapanana kadar kalir
cagirirken;
localStorage.getItem()
sessionStorage.getItem()

=>
capturing : buyuk div e eventListener (or; click) tanimlayarak, if conditions larla icerisindeki elementlerin click event ine ulasmak
bobbling

e.target   = tiklanan yeri , hedefi verir(event ile amaclanan)

(checkout projesinden ornek)

//! 1. step : tiklanan yerleri belirleme
//CAPTURING ILE;

// let productsDiv = document.querySelector(".products");
// productsDiv.addEventListener("click", (event)=>{
//     if (event.target.className == 'minus'){          
//         console.log("minus button click");
//     } else if (event.target.classList.contains('plus')){
//         console.log('plus button clicked');
//     }else if (event.target.classList.contains('remove-product')){
//         console.log('remove button clicked');
//     }
//     else{
//         console.log("other elements clicked");
//     }
//    // console.log(event.target);           
// })


=>  confirm() ; true false dondurur. icerideki sarti saglarsa , altta verilen kodu uygular.

(checkout projesinden ornek)

// productsDiv.addEventListener("click", (event)=>{
//     if (event.target.className == 'minus'){  
//         if ( event.target.nextElementSibling.innerText > 1){ 
//         event.target.nextElementSibling.innerText-- ;   
//         }else{
//             if (confirm("product will be deleted?")){           // eger kullanici ok derse silecek , yani confirm i onaylayacak 
//                 event.target.parentElement.parentElement.parentElement.remove();
//             }
//         }
//     } else if (event.target.classList.contains('plus')){
//         event.target.previousElementSibling.innerText++ ;
//         //console.log('plus button clicked');
//     }else if (event.target.classList.contains('remove-product')){
//         event.target.parentElement.parentElement.parentElement.remove();
//        // console.log('remove button clicked');
//     }
//     else{
//         //console.log("other elements clicked");
//     }
   
// })




=> toFıxed(kac basaamak istioyrsan onu yaz) : vurgunlden sonra kac basamak istiyorsak almak icin

=>parseFloat()

=> form.reset()   input yerini yenilemesi icin, (buradaki form form elementini yakaladigimiz div in adi.)

=> sayfada form varsa otoamtik olaarak yeniler, bunu engellmeek icin e.preventDefault() eklenir.

=> parseFloat() : integer yapmak icin.

=> value : input,html elemenlerinde kullanilir,
geri kalanlar icin innerHTML kullanilir.


=> if(e.target.classList.contains == "btn" )     



=>  //? Baslangicta input aktif olsun
window.onload = function () {
  todoInput.focus();
};


=>  //? Klavyeden enter tusuna basilmasi ile add butonunun click fonksiyonunun cagrilmasi
todoInput.addEventListener('keydown', (e) => {
  if (e.key === 'Enter') {
    btn.click();
  }
});


=> //? delete ve ok butonları için event tanimlamasi
todoUl.addEventListener('click', (e) => {
  //!Event, sil butonlarının birisinden geldi ise
  if (e.target.classList.contains('fa-trash')) {
    //? ilgili li elementini silerek DOM'u güncelle
    e.target.parentElement.remove();
  }

=>   //!Event, silme veya ok butonlarından geldi ise
  if (e.target.classList.contains('fa-check')) {
    //? ilgili li elementinde checked adinda bir class varsa bunu sil
    if (e.target.parentElement.classList.contains('checked')) {
      e.target.parentElement.classList.remove('checked');
    } else {
      //? ilgili li elementinde checked adinda bir class yoksa ekle
      e.target.parentElement.classList.add('checked');
    }
  }
});

=> local storage stringlerle calisir. Yani local storage e veri atacak isek string olarak atmamiz gerekir.

=> storage a veri atmanin en kolay yollarindan biri bir verielri bir arryin icine atip arrayi storage a gondermek.

=> getItem ve setItem var. bu nedenle verileri butuncul olarak ekliyruz butuncul olarak cikariyoruz.

=> adimlar,

1- diziyi olustur

let todos = [];

2- neyi saklamak istedigni belirle.

or; liste icindeki li nin, sadece yazi kismi mi? tiklanmis mi tiklanmamis mi ozelligini ?

    1- li icerisindeki veriyi tutualim
    2 - tiklanma bilgisini tutalim
    3- id bilgisini tutalim

YANI ; bir obje olusturalim.

const todoObject = {
      id: new Date().getTime(),
      isDone: false,
      content: todoInput.value,
    };


NOT : id: new Date().getTime(),   id olusturma yontemlerinden biri, saniye degeri verdigi icin uniqe bir deger vermis oluyoruz.

NOT : DIZIDEN BIR VERI SILMEK ISTEDIGIMIZDE ID ILE BUNU YAPMAK ISIMIZI KOLAYLASTIRIR.

3-     //?Yeni olsuturulan todo'yu diziye gondermek icin
    todos.push(todoObject);


4-     //?todos dizisinin son halini localStorage'e sakla
    localStorage.setItem('todos', JSON.stringify(todos));

burada todos u string olarak gondermemiz gerektigi icin, stringe cevirip gonderiyoruz.


5- su an bilgiler loclstorage a gonderildi. Fakat cagirma islemi yapilmadi. bunun icin yani sayfa acildiginda localdeki bilgileri 
ekrana yuklemek gerekiyor. bunun icin bu ornekte bir fonksiyon yazalim.


renderSavedTodos();

function renderSavedTodos() {
  todos.forEach((todo) => {
    createListElement(todo);
  });
}

6- let todos = JSON.parse(localStorage.getItem('todos')) 

basta tanimladigimiz todos arrayinin karsisina yazarak direk localdeki bilgileri alabliriz.
localden gelen bilgi string olarak gelecegi icin bunu parse() ile stringe ceviriyoruz.




7- function renderSavedTodos() {
  todos.forEach((todo) => {
    createListElement(todo);
  });
}

function createListElement(todo) {
  //? her bir todo objesini destructure yaptık
  const { id, content, isDone } = todo;
  todoUl.innerHTML += `
     <li id=${id} class=${isDone ? 'checked' : ''} >
      <i class="fa fa-check"></i>
      <p>${content}</p>
      <i class="fa fa-trash"></i>
    </li>`;
}



8- localde veri olmadiginda foreach yapisinin undefined olmamasi icin ;
todos arryinin sonuna bos liste ekliyoruz, yani localde veri varsa geitr yoksa bos array gonder demek.


let todos = JSON.parse(localStorage.getItem('todos')) || [];   ( shortscript yontemi :  || sol tarafndaki yoksa sag tarafindakini aktar demek , && sol tarafindaki varsa sagdakini aktar demek olur )


=>  local e gonderdigimiz array in icinden verieri silmek icin;
slice()
filter() kullanilablir.



























///////////////////////////////
      API
///////////////////////////////


/**** POSTMAN *******/

API DOKUMANI : https://reqres.in/api/users?page=2

=>  get islemlerinde url ile 
post put delete body ile gondermek daha dogru

=> body daha cok veri guncellerken veya yeni veri eklerken kullaniliyor.

=> https://learning.postman.com/docs/writing-scripts/script-references/test-examples/

=> postman yayin yapma

collections-> CaptionPrices (yayinlanmak istenilen belge) yanindaki 3 noktaya tikla->view documentaion ->
publish -> acilan sayfadan ayarlari yap publish de.

/////////////////////////////
SYNCHRONOUS - ASYNCHRONOUS 
/////////////////////////////////

Synchronous : sirali calisan kodlar, cok uzun kodlarda calismasi cok zaman alir.
ASynchronous : arka planda calisan kodlar vardir ve code u bloklamayan code lara ASynchronous kodlama denir.

//! Javascript, bir single-threaded ve Asenkron Programlama dilidir.
=> single-threaded : birim zamanda bir islem parcacigi calistirabilir.

=> bir isi yurutmek icin alt procesessler olusturuluyor, ve bu processlerinde alt thread leri olusturuluyor.


=> Multithreading For example, while subscribing to a website, clicking the submit button would cause you to wait until the confirmation e-mail is sent to your mailbox if it is not sent on a separate thread.

=> CPU birden fazla iş yaparken aslında zamanı küçük dilimlere böldüğünde milisaniye seviyesinde. belli bir zaman aralığında birden fazla iş yapıyormuş gibi geliyor.

=> 
console.time('timer');  // ne kadar sure gectigini olcmek icin baslatma fonksiyonu
bekle(3000);
console.timeEnd('timer');  // ne kadar sure gectigini olcmek icin baslatilan fonks. durdurma fonksiyonu


=> setTimeout()
setTimeout(function, milliseconds);

setTimeout in icine, buradaki surenin bir onemi yok. setTimeout kullanildigi zaman macrotask queue sirasina girer ve microtask queue sirasi bitmeden macroya gecmeyecegi icin sure ne olursa olsun once microtask in bitmesi beklenir sonra macro task a gecilir.


birden fazla setTimeout oldugunda surelerine gore calisir, sureleri esitse yazilma sirasina gore calisir.


Examples of macrotasks are setTimeout, setInterval, setImmediate, etc.
Examples of microtasks are, Promises, processes.nextTick, etc

=> Asenkron (setInterval, clearInterval)


=> Callback Hell (nested ve birbirine bagli callback'ler)


// callback yontemi sikintili bir yapi oldugu icin bazi cozumler gelistirilmis.

//? COZUMLER:
//?----------------------------------------------------------------
//* 1- XMLHttpRequest (Eski yontem, Ornek: AJAX)
//? https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
//* 2- Promise,
//! 3- Fetch API (Promise'in basitlestirilmis hali),
//! 4- ASYNC-AWAIT (Fetch API'nin makyajlanmis hali)



2- Promise


Promise, asenkron bir islemin basariyla ve basarisizlikla bittigini gosteren
ve ayni zamanda basariyla bittiginde sonuc verilerini temsil eden bir nesne yapisidir.




3- Fetch API (Promise'in basitlestirilmis hali)

https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods


https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch


NOTE: 
  //! error handling          BU YAPI ONEMLI HEP KULLANILIYOR
    if (!res.ok) {
      throw new Error(`Something went wrong: ${res.status}`);
    }
    return res.json();


4- ASYNC-AWAIT (Fetch API'nin makyajlanmis hali)


//? Async-Await ECMAScript 2017 ile Javascript diline eklenmistir.
//? Aslinda Promise yapisinin syntax olarak basitlestirilmis halidir.
//? Bu baglamda sentetik seker benzetmesi yapilabilir.

//* Bir fonskiyonu asyn hale getirmek icin fonksiyon keyword'nun onune
//* async keyword'u eklenir.

//* Bir async fonksiyon icerisinde await keyword'u ile yapilan istegin cevabinin
//* beklenmesi saglanir.

//* Aslinda dizilis olarak senkron mantiga benzeyen kod yazarak Asenkron
//* kod yazmayı mumkun kilar.

//* Await, promise-temelli herhangi bir fonksiyonun onune getirilerek getirildigi
//* satirdaki kodun durudurulmasini saglar. Yapilan istek yerine getirilip sonuc
//* degerlerinin dondurulmesine ile kodun calismasi devam eder.

//? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function#examples
https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function


///////////////////////
   WHETHER APP NOTES
////////////////////////



Proje cozumununu axios ile yapacagiz.
 //! axios ile islem yapildiginda veri gonderilip alinirken ekstra islem (strinfy,parse gibi) yapilmasina gerek yoktur. axios bunu kendisi otomtik olarak json olarak islem yapar.
axios kullanimi icin CDN linkini html e eklemek gerekiyor.

<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

axios bir kutuphane , fetch js in bir yontemi.


kullanilacak URL : https://openweathermap.org/current

API linki (bizim yazdigimiz-postmande de api kontrolu bakilablir) : http://api.openweathermap.org/data/2.5/weather?q=ankara&appid=4d8fb5b93d4af21d66a2948710284366&units=metric&lang=tr









